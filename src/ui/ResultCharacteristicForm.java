package ui;

/*
 * ResultCharacteristicForm.java
 *
 * Created on 13.03.2012, 23:25:19
 */

import base.collectors.Alphabet;
import base.sequencies.UniformChain;
import interfaces.ISelector;
import model.MainOutputData;
import model.io.FileResultData;
import tools.FileExtension;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.util.*;

/**
 * @author Neestell
 */
public class ResultCharacteristicForm extends JDialog implements ISelector, Observer {
    private LinkedList<MainOutputData> results;
    private JSpinner resultsCounter;

    {
        results = new LinkedList<MainOutputData>();
        resultsCounter = new JSpinner();
    }

    public ResultCharacteristicForm(JFrame mainFrame, List<MainOutputData> results) {
        super(mainFrame,true);
        initComponents();
        this.results.addAll(results);
        loadResults();
        setVisible(true);
    }

    private void loadResults() {
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        if (this.results.size() != 0) {
            fill(this.results.getFirst());
            SpinnerModel numberModel = new SpinnerCycleNumberModel(1, 1, this.results.size(), 1);
            resultsCounter.setModel(numberModel);
            resultNumber.setText(String.valueOf(resultsCounter.getValue()));
            countResults.setText(String.valueOf(this.results.size()));
            resultsCounter.setValue(1);
            return;
        }
        SpinnerModel numberModel = new SpinnerCycleNumberModel(0, 0, 0, 0);
        resultsCounter.setModel(numberModel);
        resultsCounter.setValue(0);
    }

    /**
     * Creates new form ResultCharacteristicForm
     */
    public ResultCharacteristicForm() {
        initComponents();
    }
    public ResultCharacteristicForm(JFrame mainFrame) {
        super(mainFrame, true);
        initComponents();
    }

    private void fill(MainOutputData result) {
        DefaultTableModel characteristicTableModel = (DefaultTableModel) characteristicTable.getModel();
        DefaultTableModel alphabetTableModel = (DefaultTableModel) alphabetTable.getModel();
        chainName.setText(result.getChainName());
        chain.setLineWrap(true);
        chain.setText(result.getChain().toString(UniformChain.EMPTINESS));
        formation.setLineWrap(true);
        formation.setText(result.getOrder().toString());

        characteristicTableModel.setRowCount(0);
        HashMap<String, String> parameters = result.getParameters();
        for (Map.Entry<String, String> pair : parameters.entrySet()) {
            characteristicTableModel.addRow(new String[]{pair.getKey(), pair.getValue()});
        }

        alphabetTableModel.setRowCount(0);
        Alphabet alphabet = result.getAlphabet();

        Map<String, ArrayList<Integer>> sortedAlphabet = alphabet.sortByPower();
        for (String key : sortedAlphabet.keySet()) {
            alphabetTableModel.addRow(new String[]{key, String.valueOf(sortedAlphabet.get(key).size())});
        }
    }

    @Override
    public void next() {
        resultsCounter.setValue(resultsCounter.getNextValue());
        System.out.println(resultsCounter.getNextValue());
        getResult();
    }

    private void getResult() {
        resultNumber.setText((resultsCounter.getValue()).toString());
        MainOutputData mainOutputData = null;
        try{
            mainOutputData = results.get((Integer) resultsCounter.getValue() - 1);
            fill(mainOutputData);
        }catch (IndexOutOfBoundsException e){}

    }

    @Override
    public void previous() {
        System.out.println(resultsCounter.getPreviousValue());
        resultsCounter.setValue(resultsCounter.getPreviousValue());
        getResult();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        characteristicTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        alphabetTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        chain = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        formation = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        chainName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        previousBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        countResults = new javax.swing.JLabel();
        addFiles = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        resultNumber = new javax.swing.JLabel();

        characteristicTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null}
                },
                new String[]{
                        "Параметр", "Значение"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        characteristicTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(characteristicTable);
        characteristicTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        alphabetTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null}
                },
                new String[]{
                        "Слово", "Частота"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        alphabetTable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(alphabetTable);
        alphabetTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        chain.setColumns(20);
        chain.setRows(5);
        jScrollPane4.setViewportView(chain);

        formation.setColumns(20);
        formation.setRows(5);
        jScrollPane5.setViewportView(formation);

        jLabel1.setText("Цепь:");

        chainName.setText("-");

        jLabel3.setText("Строй");

        previousBtn.setText("<");
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        nextBtn.setText(">");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        countResults.setText("0");

        addFiles.setText("Добавить");
        addFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilesActionPerformed(evt);
            }
        });

        jLabel2.setText("из");

        resultNumber.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chainName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                                                .addComponent(addFiles)
                                                .addGap(10, 10, 10)
                                                .addComponent(previousBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(resultNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(8, 8, 8)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(countResults)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(nextBtn))
                                        .addComponent(jLabel3)))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(chainName)
                                        .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(countResults)
                                        .addComponent(jLabel2)
                                        .addComponent(resultNumber)
                                        .addComponent(addFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(previousBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        /*int downIndex = -1;
        updateIndex(downIndex);
        if (results.size() != 0) previous();*/
        previous();

    }//GEN-LAST:event_previousBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {
        /* int upIndex = 1;
    updateIndex(upIndex);
    if (results.size() != 0) next();*/
        next();

    }

//    private void updateIndex(int value) {
//        int limitMax = 1;
//        int limitMin = 0;
//        boolean isUpOrDown = false;
//        int currentResultIndex = Integer.parseInt(resultNumber.getText());
//        if (value > 0) {
//            limitMax = results.size();
//            limitMin = 1;
//            isUpOrDown = currentResultIndex < limitMax;
//        }
//        if (value < 0) {
//            limitMax = 1;
//            limitMin = results.size();
//            isUpOrDown = currentResultIndex > limitMax;
//        }
//
//
//        if (currentResultIndex == limitMax) resultNumber.setText(String.valueOf(limitMin));
//        else if (isUpOrDown) resultNumber.setText(String.valueOf(currentResultIndex + value));
//    }

    private void addFilesActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        fileChooser.setMultiSelectionEnabled(true);

        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) return true;
                String extension = FileExtension.getExtension(f);
                if (extension != null) {
                    if (extension.equals(FileExtension.JSON))
                        return true;
                } else {
                    return false;
                }
                return false;
            }

            @Override
            public String getDescription() {
                String filterDescription = "Json файлы [*.json]";
                return filterDescription;
            }
        });

        int returnVal = fileChooser.showDialog(this, "Add");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            for (File file : fileChooser.getSelectedFiles()) {
                FileResultData fileResultData = new FileResultData(file);
                results.add(fileResultData.create());
                System.out.println("Result size " + results.size());
            }
            int nextValue = (Integer) resultsCounter.getValue() + 1;
            resultsCounter.setModel(new SpinnerCycleNumberModel(nextValue, 1, results.size(), 1));
            resultsCounter.setValue(nextValue);
            countResults.setText(String.valueOf(results.size()));
            resultNumber.setText(String.valueOf(resultsCounter.getValue()));
            fill(results.get((Integer) resultsCounter.getValue() - 1));
        }

    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultCharacteristicForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultCharacteristicForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultCharacteristicForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultCharacteristicForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ResultCharacteristicForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFiles;
    private javax.swing.JTable alphabetTable;
    private javax.swing.JTextArea chain;
    private javax.swing.JLabel chainName;
    private javax.swing.JTable characteristicTable;
    private javax.swing.JLabel countResults;
    private javax.swing.JTextArea formation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton previousBtn;
    private javax.swing.JLabel resultNumber;

    @Override
    public void update(Observable o, Object arg) {
        results.addAll((Collection<? extends MainOutputData>) arg);
        loadResults();
        setVisible(true);
        System.out.println("A result was added");
    }

    // End of variables declaration//GEN-END:variables
    public class SpinnerCycleNumberModel extends SpinnerNumberModel {
        public SpinnerCycleNumberModel(int value, int min, int max, int step) {
            super(value, min, max, step);
        }

        // Returns the next value. If the current value is at the end
        // of the list, returns the first value.
        // There must be at least one item in the list.
        public Object getNextValue() {
            int value = (Integer) getValue() + this.getStepSize().intValue();

            if (getMaximum().compareTo(value) == -1) return getMinimum();

            return value;
        }

        // Returns the previous value. If the current value is at the
        // start of the list, returns the last value.
        // There must be at least one item in the list.
        public Object getPreviousValue() {
            int value = (Integer) getValue() - this.getStepSize().intValue();

            if (getMinimum().compareTo(value) == 1) return getMaximum();

            return value;
        }
    }
}
